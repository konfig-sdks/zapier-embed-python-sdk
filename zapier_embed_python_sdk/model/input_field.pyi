# coding: utf-8

"""
    Zapier Embed API

    The Zapier Embed API.

    The version of the OpenAPI document: 1.0.0
    Contact: contact@zapier.com
    Created by: https://help.zapier.com/hc/en-us
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zapier_embed_python_sdk import schemas  # noqa: F401


class InputField(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A field that is an input to an Action, often eventually used to form the HTTP request that is made to a Partner API.
    """


    class MetaOapg:
        required = {
            "value_type",
            "depends_on",
            "invalidates_input_fields",
            "is_required",
            "description",
            "default_value",
            "id",
            "placeholder",
            "title",
            "type",
        }
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def INPUT_FIELD(cls):
                    return cls("input_field")
                
                @schemas.classproperty
                def INFO_FIELD(cls):
                    return cls("info_field")
                
                @schemas.classproperty
                def FIELDSET(cls):
                    return cls("fieldset")
            id = schemas.StrSchema
            default_value = schemas.StrSchema
        
            @staticmethod
            def depends_on() -> typing.Type['InputFieldDependsOn']:
                return InputFieldDependsOn
            invalidates_input_fields = schemas.BoolSchema
            is_required = schemas.BoolSchema
            placeholder = schemas.StrSchema
            
            
            class value_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("STRING")
                
                @schemas.classproperty
                def NUMBER(cls):
                    return cls("NUMBER")
                
                @schemas.classproperty
                def INTEGER(cls):
                    return cls("INTEGER")
                
                @schemas.classproperty
                def BOOLEAN(cls):
                    return cls("BOOLEAN")
                
                @schemas.classproperty
                def ARRAY(cls):
                    return cls("ARRAY")
                
                @schemas.classproperty
                def OBJECT(cls):
                    return cls("OBJECT")
            
            
            class format(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DATETIME(cls):
                    return cls("DATETIME")
                
                @schemas.classproperty
                def MULTILINE(cls):
                    return cls("MULTILINE")
                
                @schemas.classproperty
                def PASSWORD(cls):
                    return cls("PASSWORD")
                
                @schemas.classproperty
                def CODE(cls):
                    return cls("CODE")
                
                @schemas.classproperty
                def FILE(cls):
                    return cls("FILE")
                
                @schemas.classproperty
                def SELECT(cls):
                    return cls("SELECT")
        
            @staticmethod
            def items() -> typing.Type['InputFieldItems']:
                return InputFieldItems
            __annotations__ = {
                "title": title,
                "description": description,
                "type": type,
                "id": id,
                "default_value": default_value,
                "depends_on": depends_on,
                "invalidates_input_fields": invalidates_input_fields,
                "is_required": is_required,
                "placeholder": placeholder,
                "value_type": value_type,
                "format": format,
                "items": items,
            }
    
    value_type: MetaOapg.properties.value_type
    depends_on: 'InputFieldDependsOn'
    invalidates_input_fields: MetaOapg.properties.invalidates_input_fields
    is_required: MetaOapg.properties.is_required
    description: MetaOapg.properties.description
    default_value: MetaOapg.properties.default_value
    id: MetaOapg.properties.id
    placeholder: MetaOapg.properties.placeholder
    title: MetaOapg.properties.title
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_value"]) -> MetaOapg.properties.default_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["depends_on"]) -> 'InputFieldDependsOn': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invalidates_input_fields"]) -> MetaOapg.properties.invalidates_input_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_required"]) -> MetaOapg.properties.is_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placeholder"]) -> MetaOapg.properties.placeholder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value_type"]) -> MetaOapg.properties.value_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'InputFieldItems': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "type", "id", "default_value", "depends_on", "invalidates_input_fields", "is_required", "placeholder", "value_type", "format", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_value"]) -> MetaOapg.properties.default_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["depends_on"]) -> 'InputFieldDependsOn': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invalidates_input_fields"]) -> MetaOapg.properties.invalidates_input_fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_required"]) -> MetaOapg.properties.is_required: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placeholder"]) -> MetaOapg.properties.placeholder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value_type"]) -> MetaOapg.properties.value_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union['InputFieldItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "type", "id", "default_value", "depends_on", "invalidates_input_fields", "is_required", "placeholder", "value_type", "format", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        value_type: typing.Union[MetaOapg.properties.value_type, str, ],
        depends_on: 'InputFieldDependsOn',
        invalidates_input_fields: typing.Union[MetaOapg.properties.invalidates_input_fields, bool, ],
        is_required: typing.Union[MetaOapg.properties.is_required, bool, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        default_value: typing.Union[MetaOapg.properties.default_value, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        placeholder: typing.Union[MetaOapg.properties.placeholder, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
        items: typing.Union['InputFieldItems', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InputField':
        return super().__new__(
            cls,
            *args,
            value_type=value_type,
            depends_on=depends_on,
            invalidates_input_fields=invalidates_input_fields,
            is_required=is_required,
            description=description,
            default_value=default_value,
            id=id,
            placeholder=placeholder,
            title=title,
            type=type,
            format=format,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )

from zapier_embed_python_sdk.model.input_field_depends_on import InputFieldDependsOn
from zapier_embed_python_sdk.model.input_field_items import InputFieldItems
